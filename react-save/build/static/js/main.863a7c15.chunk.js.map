{"version":3,"sources":["components/WDButton.tsx","sections/TopSection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WDButton","props","Button","css","TopSection","role","aria-label","alt","src","App","styles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qbAKA,IAaeA,EAbM,SAACC,GACpB,OACE,YAACC,EAAA,EAAD,eACEC,IAAKA,YAAF,MAKCF,K,oyCCTV,IA4EeG,EA5EI,WACjB,OACE,mBACED,IAAKA,YAAF,MAKH,mBACEA,IAAKA,YAAF,MASH,mBACEA,IAAKA,YAAF,MAOH,uBACE,kBACEA,IAAKA,YAAF,MADL,YAME,oBAAME,KAAK,MAAMC,aAAW,gBAA5B,+CAIF,kBACEH,IAAKA,YAAF,MADL,qCAQA,YAAC,EAAD,CACEA,IAAKA,YAAF,MADL,sBASJ,mBACEA,IAAKA,YAAF,MAOH,mBACEA,IAAKA,YAAF,KAIHI,IAAI,+BACJC,IAAI,2B,qOCjDDC,MAnBf,WACE,OACE,wBACE,YAAC,IAAD,CACEC,OAAQP,YAAF,OAUR,YAAC,EAAD,QCNcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.863a7c15.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport { FC } from 'react'\nimport Button from '@material-ui/core/Button'\n\nconst WDButton: FC = (props) => {\n  return (\n    <Button\n      css={css`\n        background-color: #8ec5fc;\n        background-image: linear-gradient(90deg, #8ec5fc 0%, #e0c3fc 100%);\n        color: white;\n      `}\n      {...props}\n    ></Button>\n  )\n}\n\nexport default WDButton\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport WDButton from '../components/WDButton'\n\nconst TopSection = () => {\n  return (\n    <div\n      css={css`\n        background-color: #eee;\n        height: 80vh;\n      `}\n    >\n      <div\n        css={css`\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          height: 100%;\n          max-width: 80rem;\n          margin: 0 auto;\n        `}\n      >\n        <div\n          css={css`\n            display: flex;\n            flex-direction: row;\n            align-content: center;\n            align-items: center;\n          `}\n        >\n          <div>\n            <h1\n              css={css`\n                margin: 0;\n              `}\n            >\n              Wallbaum.\n              <span role=\"img\" aria-label=\"Coding Emoji\">\n                üë®üèº‚Äçüíª\n              </span>\n            </h1>\n            <h2\n              css={css`\n                margin-top: 0;\n              `}\n            >\n              Where Hendrik hosts his projects.\n            </h2>\n\n            <WDButton\n              css={css`\n                margin-top: 2rem;\n              `}\n            >\n              Explore projects\n            </WDButton>\n          </div>\n        </div>\n        <div\n          css={css`\n            display: flex;\n            flex-direction: row;\n            align-content: center;\n            align-items: center;\n          `}\n        >\n          <img\n            css={css`\n              max-width: 80%;\n              max-height: 80%;\n            `}\n            alt=\"Portrait of Hendrik Wallbaum\"\n            src=\"/portrait-free.png\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TopSection\n","/** @jsx jsx */\nimport { css, jsx, Global } from '@emotion/core'\nimport TopSection from './sections/TopSection'\n\nfunction App() {\n  return (\n    <main>\n      <Global\n        styles={css`\n          h1 {\n            font-weight: 300;\n            font-size: 3rem;\n          }\n          h2 {\n            font-weight: 300;\n          }\n        `}\n      />\n      <TopSection />\n    </main>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}